// ==UserScript==
// @name Omnivox UI Optimizer
// @description A simple user script to improve the UI of Omnivox.
// @version 1.3.12
// @author Evan Luo
// @homepage https://github.com/evannotfound/omnivox-optimizer
// @match *://*.omnivox.ca/*
// @downloadURL https://github.com/evannotfound/omnivox-optimizer/releases/latest/download/omnivox-optimizer.user.js
// @grant GM_xmlhttpRequest
// @license GPL-3.0
// @run-at document-start
// @updateURL https://github.com/evannotfound/omnivox-optimizer/releases/latest/download/omnivox-optimizer.meta.js
// ==/UserScript==

"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdateomnivox_optimizer"]("main",{

/***/ "./src/modules/lea/assignments.js":
/*!****************************************!*\
  !*** ./src/modules/lea/assignments.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   optimizeAssignmentsList: () => (/* binding */ optimizeAssignmentsList)\n/* harmony export */ });\nfunction optimizeAssignmentsList() {\n    // Add debug logging\n    console.log('Optimizing assignments list...');\n    \n    // Find the main assignments table (the outer one)\n    const mainTable = document.querySelector('table[width=\"550\"]');\n    if (!mainTable) {\n        console.log('No main table found');\n        return;\n    }\n\n    // Find the inner assignments table\n    const assignmentsTable = document.querySelector('#tabListeTravEtu');\n    if (!assignmentsTable) {\n        console.log('No assignments table found');\n        return;\n    }\n\n    // Create main container\n    const pageContainer = document.createElement('div');\n    pageContainer.className = 'assignments-page';\n\n    // Move the title elements\n    const titleElements = document.querySelectorAll('.TitrePageLigne1, .TitrePageLigne2');\n    const titleContainer = document.createElement('div');\n    titleContainer.className = 'page-header';\n    titleElements.forEach(el => {\n        titleContainer.appendChild(el.cloneNode(true));\n    });\n    pageContainer.appendChild(titleContainer);\n\n    // Create assignments container\n    const mainContainer = document.createElement('div');\n    mainContainer.className = 'assignments-container';\n    \n    // Process each category\n    const categories = [];\n    let currentCategory = null;\n\n    assignmentsTable.querySelectorAll('tr').forEach(row => {\n        // Skip header rows\n        if (row.querySelector('.EnteteListTabTravauxEtu')) {\n            return;\n        }\n\n        const categoryTitle = row.querySelector('.TitreCategorie');\n        if (categoryTitle) {\n            currentCategory = {\n                title: categoryTitle.textContent.trim() || 'Assignments',\n                assignments: []\n            };\n            categories.push(currentCategory);\n            return;\n        }\n\n        const assignmentLink = row.querySelector('a[onclick*=\"OpenCentre\"]');\n        if (!assignmentLink) {\n            return;\n        }\n\n        if (!currentCategory) {\n            currentCategory = {\n                title: 'Assignments',\n                assignments: []\n            };\n            categories.push(currentCategory);\n        }\n\n        const assignmentData = extractAssignmentFromRow(row, assignmentLink);\n        if (assignmentData) {\n            currentCategory.assignments.push(assignmentData);\n        }\n    });\n\n    const populatedCategories = categories.filter(category => category.assignments.length > 0);\n\n    // Create the new grid-based interface\n    if (populatedCategories.length === 0) {\n        const emptyState = document.createElement('div');\n        emptyState.className = 'assignments-empty-state';\n        emptyState.innerHTML = `\n            <div class=\"empty-title\">No assignments to display</div>\n            <div class=\"empty-subtitle\">Check back later for new assignments.</div>\n        `;\n        mainContainer.appendChild(emptyState);\n    } else {\n        populatedCategories.forEach(category => {\n            const categoryContainer = document.createElement('div');\n            categoryContainer.className = 'category-container';\n\n            const categoryHeader = document.createElement('div');\n            categoryHeader.className = 'category-header';\n            categoryHeader.textContent = category.title;\n            categoryContainer.appendChild(categoryHeader);\n\n            const assignmentsGrid = document.createElement('div');\n            assignmentsGrid.className = 'assignments-grid';\n\n            category.assignments.forEach(assignment => {\n                const assignmentCard = document.createElement('div');\n                assignmentCard.className = `assignment-card ${assignment.isUnread ? 'unread' : ''} ${assignment.isSubmitted ? 'submitted' : ''}`;\n\n                const cardClickHandler = createCardClickHandler(assignment.onClickAttribute);\n                if (cardClickHandler) {\n                    assignmentCard.addEventListener('click', cardClickHandler);\n                    assignmentCard.addEventListener('keydown', event => {\n                        if (event.key === 'Enter' || event.key === ' ') {\n                            event.preventDefault();\n                            cardClickHandler();\n                        }\n                    });\n                    assignmentCard.setAttribute('role', 'button');\n                    assignmentCard.tabIndex = 0;\n                    assignmentCard.style.cursor = 'pointer';\n                }\n\n                const formattedDueDate = formatDate(assignment.dueDate, assignment.dueText);\n                const relativeDueDate = formatRelativeDate(assignment.dueDate);\n                const isOverdueAssignment = !assignment.isSubmitted && isOverdue(assignment.dueDate);\n\n                assignmentCard.innerHTML = `\n                    <div class=\"assignment-header\">\n                        <div class=\"assignment-title-row\">\n                            <span class=\"assignment-title\">${assignment.title}</span>\n                            ${createStatusIndicators(assignment)}\n                        </div>\n                        ${assignment.dueText ? `\n                            <div class=\"due-date ${isOverdueAssignment ? 'overdue' : ''}\">\n                                <span class=\"due-label\">Due:</span>\n                                <span class=\"date\">${formattedDueDate}</span>\n                                ${!isOverdueAssignment && relativeDueDate ? `\n                                    <span class=\"relative-date-badge\">${relativeDueDate}</span>\n                                ` : ''}\n                            </div>\n                        ` : ''}\n                    </div>\n                    <div class=\"assignment-details\">\n                        ${assignment.submissionMethod ? `\n                            <div class=\"submission-info\">\n                                <span class=\"label\">Submit via:</span>\n                                <span class=\"method\">${assignment.submissionMethod}</span>\n                            </div>\n                        ` : ''}\n                        ${assignment.statusLabel !== '-' ? `\n                            <div class=\"status-info\">\n                                <span class=\"label\">Status:</span>\n                                <span class=\"status ${assignment.isSubmitted ? 'submitted' : ''}\">${assignment.statusLabel}</span>\n                            </div>\n                        ` : ''}\n                    </div>\n                   \n                `;\n                assignmentsGrid.appendChild(assignmentCard);\n            });\n\n            categoryContainer.appendChild(assignmentsGrid);\n            mainContainer.appendChild(categoryContainer);\n        });\n    }\n\n    pageContainer.appendChild(mainContainer);\n\n    // Replace the entire table with the new container\n    const centerElement = document.querySelector('center');\n    if (centerElement) {\n        // Remove all children from center\n        while (centerElement.firstChild) {\n            centerElement.removeChild(centerElement.firstChild);\n        }\n        // Add our new container\n        centerElement.appendChild(pageContainer);\n    }\n}\n\nfunction extractAssignmentFromRow(row, linkElement) {\n    const title = linkElement.textContent ? linkElement.textContent.trim() : '';\n    const onClickAttribute = linkElement.getAttribute('onclick') || '';\n    const linkMatch = onClickAttribute.match(/OpenCentre\\('([^']+)'/);\n    const link = linkMatch ? linkMatch[1] : null;\n\n    const cells = Array.from(row.children).filter(cell => cell.tagName === 'TD');\n    const dueCell = cells[2] || null;\n    const statusCell = cells[3] || null;\n\n    const submissionMethod = dueCell?.querySelector('.RemTrav_Sommaire_ProchainsTravauxDesc')?.textContent?.trim() || null;\n\n    let dueText = null;\n    if (dueCell) {\n        const primarySpan = Array.from(dueCell.querySelectorAll('span')).find(span => !span.classList.contains('RemTrav_Sommaire_ProchainsTravauxDesc'));\n        const rawDueText = primarySpan?.textContent ?? dueCell.textContent ?? '';\n        const cleanedDueText = normalizeWhitespace(rawDueText);\n        if (cleanedDueText) {\n            if (submissionMethod) {\n                const normalizedMethod = normalizeWhitespace(submissionMethod);\n                dueText = cleanedDueText.replace(normalizedMethod, '').trim();\n            } else {\n                dueText = cleanedDueText;\n            }\n        }\n    }\n\n    let statusLabel = '-';\n    if (statusCell) {\n        const normalizedStatus = normalizeWhitespace(statusCell.textContent);\n        if (normalizedStatus) {\n            statusLabel = normalizedStatus;\n        }\n    }\n\n    const isSubmitted = /submitted|remise\\s*ok|remis/i.test(statusLabel);\n    const isUnread = row.querySelector('.CellEnonceNonVisualise img[src*=\"TravailNonVisualise\"]') !== null;\n    const dueDate = parseDueDate(dueText);\n\n    if (!title || !link) {\n        return null;\n    }\n\n    return {\n        title,\n        link,\n        onClickAttribute,\n        dueText,\n        dueDate,\n        submissionMethod,\n        statusLabel,\n        isSubmitted,\n        isUnread\n    };\n}\n\nfunction createCardClickHandler(rawOnClick) {\n    if (!rawOnClick) {\n        return null;\n    }\n\n    try {\n        const handler = new Function(rawOnClick);\n        return () => {\n            try {\n                const scope = typeof window !== 'undefined' ? window : globalThis;\n                handler.call(scope);\n            } catch (error) {\n                console.error('Failed to execute assignment handler', error);\n            }\n        };\n    } catch (error) {\n        console.error('Failed to create assignment handler', error);\n        return null;\n    }\n}\n\nfunction normalizeWhitespace(value) {\n    return typeof value === 'string'\n        ? value.replace(/\\u00A0/g, ' ').replace(/\\s+/g, ' ').trim()\n        : '';\n}\n\nfunction parseDueDate(rawText) {\n    if (!rawText) {\n        return null;\n    }\n\n    const sanitized = normalizeWhitespace(rawText);\n    if (!sanitized) {\n        return null;\n    }\n\n    const nativeParsed = new Date(sanitized);\n    if (!Number.isNaN(nativeParsed.getTime())) {\n        return nativeParsed;\n    }\n\n    const normalized = sanitized\n        .replace(/([A-Za-z\\u00C0-\\u017F]+)-(\\d{1,2}),/u, '$1 $2,')\n        .replace(/\\s+at\\s+/i, ' ');\n    const normalizedParsed = new Date(normalized);\n    if (!Number.isNaN(normalizedParsed.getTime())) {\n        return normalizedParsed;\n    }\n\n    const match = sanitized.match(/([A-Za-z\\u00C0-\\u017F]+)-?(\\d{1,2}),\\s*(\\d{4})(?:\\s+at\\s+(\\d{1,2})(?::(\\d{2}))?(?:\\s*(am|pm))?)?/i);\n    if (!match) {\n        return null;\n    }\n\n    const monthToken = normalizeMonthToken(match[1]);\n    const monthIndex = monthTokenToIndex(monthToken);\n    if (monthIndex === null) {\n        return null;\n    }\n\n    const day = parseInt(match[2], 10);\n    const year = parseInt(match[3], 10);\n    let hour = match[4] ? parseInt(match[4], 10) : 0;\n    const minute = match[5] ? parseInt(match[5], 10) : 0;\n    const meridiem = match[6] ? match[6].toLowerCase() : null;\n\n    if (meridiem === 'pm' && hour < 12) {\n        hour += 12;\n    } else if (meridiem === 'am' && hour === 12) {\n        hour = 0;\n    }\n\n    const parsedDate = new Date(year, monthIndex, day, hour, minute);\n    return Number.isNaN(parsedDate.getTime()) ? null : parsedDate;\n}\n\nfunction normalizeMonthToken(token) {\n    return stripAccents(token).replace(/\\./g, '').toLowerCase();\n}\n\nfunction monthTokenToIndex(token) {\n    if (!token) {\n        return null;\n    }\n\n    const monthMap = {\n        jan: 0,\n        january: 0,\n        janv: 0,\n        janvier: 0,\n        feb: 1,\n        february: 1,\n        fev: 1,\n        fevrier: 1,\n        mar: 2,\n        march: 2,\n        mars: 2,\n        apr: 3,\n        april: 3,\n        avr: 3,\n        avril: 3,\n        may: 4,\n        mai: 4,\n        jun: 5,\n        june: 5,\n        juin: 5,\n        jul: 6,\n        july: 6,\n        juil: 6,\n        juillet: 6,\n        aug: 7,\n        august: 7,\n        aou: 7,\n        aout: 7,\n        sep: 8,\n        sept: 8,\n        september: 8,\n        septembre: 8,\n        oct: 9,\n        october: 9,\n        octobre: 9,\n        nov: 10,\n        november: 10,\n        novembre: 10,\n        dec: 11,\n        december: 11,\n        decembre: 11\n    };\n\n    if (token in monthMap) {\n        return monthMap[token];\n    }\n\n    return null;\n}\n\nfunction stripAccents(value) {\n    return value\n        ? value.normalize('NFD').replace(/[\\u0300-\\u036f]/g, '')\n        : '';\n}\n\nfunction toDate(value) {\n    if (!value) {\n        return null;\n    }\n\n    if (value instanceof Date) {\n        return Number.isNaN(value.getTime()) ? null : value;\n    }\n\n    const parsed = new Date(value);\n    return Number.isNaN(parsed.getTime()) ? null : parsed;\n}\n\nfunction isOverdue(dateValue) {\n    const dueDate = toDate(dateValue);\n    if (!dueDate) {\n        return false;\n    }\n\n    const now = new Date();\n    return dueDate.getTime() < now.getTime();\n}\n\nfunction formatDate(dateValue, fallbackText = '') {\n    const date = toDate(dateValue);\n    if (!date) {\n        return fallbackText;\n    }\n\n    const displayDate = new Date(date);\n    if (displayDate.getHours() === 0 && displayDate.getMinutes() === 0) {\n        displayDate.setHours(23, 59);\n    }\n\n    return displayDate.toLocaleDateString('en-US', {\n        weekday: 'short',\n        month: 'short',\n        day: 'numeric',\n        hour: 'numeric',\n        minute: '2-digit'\n    });\n}\n\nfunction formatRelativeDate(dateValue) {\n    const date = toDate(dateValue);\n    if (!date) {\n        return null;\n    }\n\n    const now = new Date();\n    const diffTime = date.getTime() - now.getTime();\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n\n    if (diffDays <= 0) {\n        return null;\n    }\n\n    if (diffDays === 1) {\n        return 'Tomorrow';\n    }\n\n    if (diffDays < 7) {\n        return `In ${diffDays} days`;\n    }\n\n    if (diffDays < 30) {\n        return `${Math.floor(diffDays / 7)} weeks`;\n    }\n\n    return null;\n}\n\nfunction createStatusIndicators(assignment) {\n    return `\n        <div class=\"status-indicators\">\n            ${assignment.isUnread ? `\n                <div class=\"indicator new-indicator\" title=\"New\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-diamond-plus\"><path d=\"M12 8v8\"/><path d=\"M2.7 10.3a2.41 2.41 0 0 0 0 3.41l7.59 7.59a2.41 2.41 0 0 0 3.41 0l7.59-7.59a2.41 2.41 0 0 0 0-3.41L13.7 2.71a2.41 2.41 0 0 0-3.41 0z\"/><path d=\"M8 12h8\"/></svg>\n                </div>\n            ` : ''}\n            ${assignment.isSubmitted ? `\n                <div class=\"indicator submitted-indicator\" title=\"Submitted\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-circle-check\">\n                        <circle cx=\"12\" cy=\"12\" r=\"10\"/>\n                        <path d=\"m9 12 2 2 4-4\"/>\n                    </svg>\n                </div>\n            ` : ''}\n            ${!assignment.isSubmitted && isOverdue(assignment.dueDate) ? `\n                <div class=\"indicator overdue-indicator\" title=\"Overdue\">\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" class=\"lucide lucide-alarm-clock-minus\">\n                        <circle cx=\"12\" cy=\"13\" r=\"8\"/>\n                        <path d=\"M5 3 2 6\"/>\n                        <path d=\"m22 6-3-3\"/>\n                        <path d=\"M6.38 18.7 4 21\"/>\n                        <path d=\"M17.64 18.67 20 21\"/>\n                        <path d=\"M9 13h6\"/>\n                    </svg>\n                </div>\n            ` : ''}\n        </div>\n    `;\n}\n\n\n//# sourceURL=webpack://omnivox-optimizer/./src/modules/lea/assignments.js?");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ (() => {
/******/ 	__webpack_require__.h = () => ("6b44e4ae49879d7f24c4")
/******/ })();
/******/ 
/******/ }
);